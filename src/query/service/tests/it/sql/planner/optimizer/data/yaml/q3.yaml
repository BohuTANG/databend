name: "Q3"
description: "TPC-DS Query 3 optimizer test"

sql: |
  SELECT dt.d_year, item.i_brand_id brand_id, item.i_brand brand, 
         SUM(ss_ext_sales_price) AS sum_agg
  FROM date_dim dt, store_sales, item
  WHERE dt.d_date_sk = store_sales.ss_sold_date_sk
    AND store_sales.ss_item_sk = item.i_item_sk
    AND item.i_manufact_id = 128
    AND dt.d_moy = 11
  GROUP BY dt.d_year, item.i_brand, item.i_brand_id
  ORDER BY dt.d_year, sum_agg DESC, brand_id
  LIMIT 100

table_statistics:
  date_dim:
    num_rows: 1000
    data_size: 102400
    data_size_compressed: 51200
    index_size: 20480
    number_of_blocks: 10
    number_of_segments: 2
  store_sales:
    num_rows: 10000
    data_size: 1024000
    data_size_compressed: 512000
    index_size: 204800
    number_of_blocks: 100
    number_of_segments: 5
  item:
    num_rows: 500
    data_size: 51200
    data_size_compressed: 25600
    index_size: 10240
    number_of_blocks: 5
    number_of_segments: 1

column_statistics:
  date_dim.d_year:
    min: 1990
    max: 2000
    ndv: 10
    null_count: 0
  store_sales.ss_ext_sales_price:
    min: 10.0
    max: 1000.0
    ndv: 1000
    null_count: 5
  item.i_brand_id:
    min: 1
    max: 50
    ndv: 50
    null_count: 0

raw_plan: |
  Limit
  ├── limit: [100]
  ├── offset: [0]
  └── Sort
      ├── sort keys: [default.date_dim.d_year (#6) ASC, derived.SUM(ss_ext_sales_price) (#73) DESC, default.item.i_brand_id (#58) ASC]
      ├── limit: [NONE]
      └── EvalScalar
          ├── scalars: [dt.d_year (#6) AS (#6), item.i_brand_id (#58) AS (#58), item.i_brand (#59) AS (#59), SUM(ss_ext_sales_price) (#73) AS (#73)]
          └── Aggregate(Initial)
              ├── group items: [dt.d_year (#6), item.i_brand (#59), item.i_brand_id (#58)]
              ├── aggregate functions: [SUM(ss_ext_sales_price) (#73)]
              └── EvalScalar
                  ├── scalars: [dt.d_year (#6) AS (#6), store_sales.ss_ext_sales_price (#43) AS (#43), item.i_brand_id (#58) AS (#58), item.i_brand (#59) AS (#59)]
                  └── Filter
                      ├── filters: [eq(dt.d_date_sk (#0), store_sales.ss_sold_date_sk (#28)), eq(store_sales.ss_item_sk (#30), item.i_item_sk (#51)), eq(item.i_manufact_id (#64), 128), eq(dt.d_moy (#8), 11)]
                      └── Join(Cross)
                          ├── build keys: []
                          ├── probe keys: []
                          ├── other filters: []
                          ├── Join(Cross)
                          │   ├── build keys: []
                          │   ├── probe keys: []
                          │   ├── other filters: []
                          │   ├── Scan
                          │   │   ├── table: default.date_dim
                          │   │   ├── filters: []
                          │   │   ├── order by: []
                          │   │   └── limit: NONE
                          │   └── Scan
                          │       ├── table: default.store_sales
                          │       ├── filters: []
                          │       ├── order by: []
                          │       └── limit: NONE
                          └── Scan
                              ├── table: default.item
                              ├── filters: []
                              ├── order by: []
                              └── limit: NONE

optimized_plan: |
  Limit
  ├── limit: [100]
  ├── offset: [0]
  └── Sort
      ├── sort keys: [default.date_dim.d_year (#6) ASC, derived.SUM(ss_ext_sales_price) (#73) DESC, default.item.i_brand_id (#58) ASC]
      ├── limit: [100]
      └── Aggregate(Final)
          ├── group items: [dt.d_year (#6), item.i_brand (#59), item.i_brand_id (#58)]
          ├── aggregate functions: [SUM(ss_ext_sales_price) (#73)]
          └── Aggregate(Partial)
              ├── group items: [dt.d_year (#6), item.i_brand (#59), item.i_brand_id (#58)]
              ├── aggregate functions: [SUM(ss_ext_sales_price) (#73)]
              └── EvalScalar
                  ├── scalars: [dt.d_year (#6) AS (#6), store_sales.ss_ext_sales_price (#43) AS (#43), item.i_brand_id (#58) AS (#58), item.i_brand (#59) AS (#59), dt.d_date_sk (#0) AS (#74), store_sales.ss_sold_date_sk (#28) AS (#75), store_sales.ss_item_sk (#30) AS (#76), item.i_item_sk (#51) AS (#77), item.i_manufact_id (#64) AS (#78), dt.d_moy (#8) AS (#79)]
                  └── Join(Inner)
                      ├── build keys: [store_sales.ss_sold_date_sk (#28)]
                      ├── probe keys: [dt.d_date_sk (#0)]
                      ├── other filters: []
                      ├── Scan
                      │   ├── table: default.date_dim
                      │   ├── filters: [eq(date_dim.d_moy (#8), 11)]
                      │   ├── order by: []
                      │   └── limit: NONE
                      └── Join(Inner)
                          ├── build keys: [item.i_item_sk (#51)]
                          ├── probe keys: [store_sales.ss_item_sk (#30)]
                          ├── other filters: []
                          ├── Scan
                          │   ├── table: default.store_sales
                          │   ├── filters: []
                          │   ├── order by: []
                          │   └── limit: NONE
                          └── Scan
                              ├── table: default.item
                              ├── filters: [eq(item.i_manufact_id (#64), 128)]
                              ├── order by: []
                              └── limit: NONE

snow_plan: |
  {
    "stages": [
      {
        "id": "0",
        "type": "TableScan",
        "table": "date_dim",
        "filters": ["d_moy = 11"],
        "output": ["d_date_sk", "d_year"]
      },
      {
        "id": "1",
        "type": "TableScan",
        "table": "store_sales",
        "filters": [],
        "output": ["ss_sold_date_sk", "ss_item_sk", "ss_ext_sales_price"]
      },
      {
        "id": "2",
        "type": "TableScan",
        "table": "item",
        "filters": ["i_manufact_id = 128"],
        "output": ["i_item_sk", "i_brand_id", "i_brand"]
      },
      {
        "id": "3",
        "type": "HashJoin",
        "join_type": "inner",
        "left": "1",
        "right": "2",
        "left_keys": ["ss_item_sk"],
        "right_keys": ["i_item_sk"]
      },
      {
        "id": "4",
        "type": "HashJoin",
        "join_type": "inner",
        "left": "0",
        "right": "3",
        "left_keys": ["d_date_sk"],
        "right_keys": ["ss_sold_date_sk"]
      },
      {
        "id": "5",
        "type": "Aggregate",
        "group_by": ["d_year", "i_brand", "i_brand_id"],
        "aggregates": [{"function": "sum", "input": "ss_ext_sales_price", "alias": "sum_agg"}]
      },
      {
        "id": "6",
        "type": "Sort",
        "sort_keys": [
          {"column": "d_year", "direction": "asc"},
          {"column": "sum_agg", "direction": "desc"},
          {"column": "i_brand_id", "direction": "asc"}
        ]
      },
      {
        "id": "7",
        "type": "Limit",
        "limit": 100
      }
    ]
  }
